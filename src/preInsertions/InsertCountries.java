package preInsertions;

import DBManager.CountriesDBM;
import Conn.Connection;
import entities.Countries;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Jociane Franzoni de Lima
 * @author Lucas Penha de Moura
 */
public class InsertCountries
{

    CountriesDBM countriesDBM = new CountriesDBM();
    List<Countries> list = new ArrayList<>();

    public void insert() {

        Countries coun0 = new Countries(1, "curabitur",1);
        list.add(coun0);
        Countries coun1 = new Countries(2, "nulla fusce",1);
        list.add(coun1);
        Countries coun2 = new Countries(3, "habitant",1);
        list.add(coun2);
        Countries coun3 = new Countries(4, "sociosqu",1);
        list.add(coun3);
        Countries coun4 = new Countries(5, "accumsan",1);
        list.add(coun4);
        Countries coun5 = new Countries(6, "taciti hendrerit",0);
        list.add(coun5);
        Countries coun6 = new Countries(7, "turpis nulla",0);
        list.add(coun6);
        Countries coun7 = new Countries(8, "nullam",0);
        list.add(coun7);
        Countries coun8 = new Countries(9, "ligula placerat",0);
        list.add(coun8);
        Countries coun9 = new Countries(10, "sagittis",0);
        list.add(coun9);
        Countries coun10 = new Countries(11, "netus",0);
        list.add(coun10);
        Countries coun11 = new Countries(12, "vesti",0);
        list.add(coun11);
        Countries coun12 = new Countries(13, "netus",0);
        list.add(coun12);
        Countries coun13 = new Countries(14, "vehicula wisiaenean",0);
        list.add(coun13);
        Countries coun14 = new Countries(15, "lacus",0);
        list.add(coun14);
        Countries coun15 = new Countries(16, "porta",0);
        list.add(coun15);
        Countries coun16 = new Countries(17, "eleifend",0);
        list.add(coun16);
        Countries coun17 = new Countries(18, "cubilia",0);
        list.add(coun17);
        Countries coun18 = new Countries(19, "pellentesque",0);
        list.add(coun18);
        Countries coun19 = new Countries(20, "pharetra",0);
        list.add(coun19);
        Countries coun20 = new Countries(21, "sagittis",0);
        list.add(coun20);
        Countries coun21 = new Countries(22, "sodales tempor",0);
        list.add(coun21);
        Countries coun22 = new Countries(23, "purus dignissim",0);
        list.add(coun22);
        Countries coun23 = new Countries(24, "libero",0);
        list.add(coun23);
        Countries coun24 = new Countries(25, "aliquam",0);
        list.add(coun24);
        Countries coun25 = new Countries(26, "tempus tincidunt",0);
        list.add(coun25);
        Countries coun26 = new Countries(27, "lacus",0);
        list.add(coun26);
        Countries coun27 = new Countries(28, "inceptos viverra",0);
        list.add(coun27);
        Countries coun28 = new Countries(29, "cubilia malesuada",0);
        list.add(coun28);
        Countries coun29 = new Countries(30, "feugiat",0);
        list.add(coun29);
        Countries coun30 = new Countries(31, "pharetra",0);
        list.add(coun30);
        Countries coun31 = new Countries(32, "dolor volutpat",0);
        list.add(coun31);
        Countries coun32 = new Countries(33, "egestas posuere",0);
        list.add(coun32);
        Countries coun33 = new Countries(34, "maecenas",0);
        list.add(coun33);
        Countries coun34 = new Countries(35, "netus",0);
        list.add(coun34);
        Countries coun35 = new Countries(36, "auctor aptent",0);
        list.add(coun35);
        Countries coun36 = new Countries(37, "habitasse lectus",0);
        list.add(coun36);
        Countries coun37 = new Countries(38, "facilisis",0);
        list.add(coun37);
        Countries coun38 = new Countries(39, "tempor cubilia",0);
        list.add(coun38);
        Countries coun39 = new Countries(40, "sociosqu",0);
        list.add(coun39);
        Countries coun40 = new Countries(41, "proin",0);
        list.add(coun40);
        Countries coun41 = new Countries(42, "turpis",0);
        list.add(coun41);
        Countries coun42 = new Countries(43, "nonummy",0);
        list.add(coun42);
        Countries coun43 = new Countries(44, "lacus bibendum",0);
        list.add(coun43);
        Countries coun44 = new Countries(45, "congue",0);
        list.add(coun44);
        Countries coun45 = new Countries(46, "ultrices",0);
        list.add(coun45);
        Countries coun46 = new Countries(47, "tellus",0);
        list.add(coun46);
        Countries coun47 = new Countries(48, "porta",0);
        list.add(coun47);
        Countries coun48 = new Countries(49, "facilisisnunc semper",0);
        list.add(coun48);
        Countries coun49 = new Countries(50, "class",0);
        list.add(coun49);
        Countries coun50 = new Countries(51, "malesuada",0);
        list.add(coun50);
        Countries coun51 = new Countries(52, "senectus",0);
        list.add(coun51);
        Countries coun52 = new Countries(53, "lorem scelerisque",0);
        list.add(coun52);
        Countries coun53 = new Countries(54, "tristique",0);
        list.add(coun53);
        Countries coun54 = new Countries(55, "fames convallis",0);
        list.add(coun54);
        Countries coun55 = new Countries(56, "sagittis",0);
        list.add(coun55);
        Countries coun56 = new Countries(57, "commodo",0);
        list.add(coun56);
        Countries coun57 = new Countries(58, "lacinia",0);
        list.add(coun57);
        Countries coun58 = new Countries(59, "pharetra",0);
        list.add(coun58);
        Countries coun59 = new Countries(60, "pellentesque aliquam",0);
        list.add(coun59);
        Countries coun60 = new Countries(61, "sodales",0);
        list.add(coun60);
        Countries coun61 = new Countries(62, "etiam",0);
        list.add(coun61);
        Countries coun62 = new Countries(63, "malesuada",0);
        list.add(coun62);
        Countries coun63 = new Countries(64, "fringilla",0);
        list.add(coun63);
        Countries coun64 = new Countries(65, "tempus malesuada",0);
        list.add(coun64);
        Countries coun65 = new Countries(66, "nullam",0);
        list.add(coun65);
        Countries coun66 = new Countries(67, "feugiat lacinia",0);
        list.add(coun66);
        Countries coun67 = new Countries(68, "elementum imperdiet",0);
        list.add(coun67);
        Countries coun68 = new Countries(69, "varius nullam",0);
        list.add(coun68);
        Countries coun69 = new Countries(70, "conubia",0);
        list.add(coun69);
        Countries coun70 = new Countries(71, "mattis",0);
        list.add(coun70);
        Countries coun71 = new Countries(72, "euismod imperdiet",0);
        list.add(coun71);
        Countries coun72 = new Countries(73, "netus",0);
        list.add(coun72);
        Countries coun73 = new Countries(74, "bulum etiam",0);
        list.add(coun73);
        Countries coun74 = new Countries(75, "nullam ultricies",0);
        list.add(coun74);
        Countries coun75 = new Countries(76, "eleifend",0);
        list.add(coun75);
        Countries coun76 = new Countries(77, "lorem lobortis",0);
        list.add(coun76);
        Countries coun77 = new Countries(78, "eleifend",0);
        list.add(coun77);
        Countries coun78 = new Countries(79, "tristique torquent",0);
        list.add(coun78);
        Countries coun79 = new Countries(80, "luctus laoreet",0);
        list.add(coun79);
        Countries coun80 = new Countries(81, "wisiaenean accumsan",0);
        list.add(coun80);
        Countries coun81 = new Countries(82, "nullam pharetra",0);
        list.add(coun81);
        Countries coun82 = new Countries(83, "morbi",0);
        list.add(coun82);
        Countries coun83 = new Countries(84, "libero",0);
        list.add(coun83);
        Countries coun84 = new Countries(85, "proin",0);
        list.add(coun84);
        Countries coun85 = new Countries(86, "aliquam lacinia",0);
        list.add(coun85);
        Countries coun86 = new Countries(87, "sociosqu cursus",0);
        list.add(coun86);
        Countries coun87 = new Countries(88, "praesent",0);
        list.add(coun87);
        Countries coun88 = new Countries(89, "vitae",0);
        list.add(coun88);
        Countries coun89 = new Countries(90, "vesti",0);
        list.add(coun89);
        Countries coun90 = new Countries(91, "euismod consectetuer",0);
        list.add(coun90);
        Countries coun91 = new Countries(92, "ornare",0);
        list.add(coun91);
        Countries coun92 = new Countries(93, "semper",0);
        list.add(coun92);
        Countries coun93 = new Countries(94, "fusce",0);
        list.add(coun93);
        Countries coun94 = new Countries(95, "integer facilisis",0);
        list.add(coun94);
        Countries coun95 = new Countries(96, "donec tumst",0);
        list.add(coun95);
        Countries coun96 = new Countries(97, "primis convallis",0);
        list.add(coun96);
        Countries coun97 = new Countries(98, "tellus",0);
        list.add(coun97);
        Countries coun98 = new Countries(99, "fames",0);
        list.add(coun98);
        Countries coun99 = new Countries(100, "curae",0);
        list.add(coun99);
        Countries coun100 = new Countries(101, "ornare",0);
        list.add(coun100);
        Countries coun101 = new Countries(102, "volutpat",0);
        list.add(coun101);
        Countries coun102 = new Countries(103, "platea habitant",0);
        list.add(coun102);
        Countries coun103 = new Countries(104, "primis tristique",0);
        list.add(coun103);
        Countries coun104 = new Countries(105, "aliquet",0);
        list.add(coun104);
        Countries coun105 = new Countries(106, "dictum",0);
        list.add(coun105);
        Countries coun106 = new Countries(107, "lobortis tempor",0);
        list.add(coun106);
        Countries coun107 = new Countries(108, "inceptos varius",0);
        list.add(coun107);
        Countries coun108 = new Countries(109, "sodales",0);
        list.add(coun108);
        Countries coun109 = new Countries(110, "wisiaenean",0);
        list.add(coun109);
        Countries coun110 = new Countries(111, "semper",0);
        list.add(coun110);
        Countries coun111 = new Countries(112, "aptent purus",0);
        list.add(coun111);
        Countries coun112 = new Countries(113, "augue",0);
        list.add(coun112);
        Countries coun113 = new Countries(114, "convallis",0);
        list.add(coun113);
        Countries coun114 = new Countries(115, "mollis",0);
        list.add(coun114);
        Countries coun115 = new Countries(116, "dictumst lectus",0);
        list.add(coun115);
        Countries coun116 = new Countries(117, "fames magna",0);
        list.add(coun116);
        Countries coun117 = new Countries(118, "lacus",0);
        list.add(coun117);
        Countries coun118 = new Countries(119, "risus",0);
        list.add(coun118);
        Countries coun119 = new Countries(120, "dictumst",0);
        list.add(coun119);
        Countries coun120 = new Countries(121, "cubilia",0);
        list.add(coun120);
        Countries coun121 = new Countries(122, "fermentum",0);
        list.add(coun121);
        Countries coun122 = new Countries(123, "fermentum torquent",0);
        list.add(coun122);
        Countries coun123 = new Countries(124, "sapien",0);
        list.add(coun123);
        Countries coun124 = new Countries(125, "venenatis",0);
        list.add(coun124);
        Countries coun125 = new Countries(126, "cursus",0);
        list.add(coun125);
        Countries coun126 = new Countries(127, "quisque",0);
        list.add(coun126);
        Countries coun127 = new Countries(128, "nostra posuere",0);
        list.add(coun127);
        Countries coun128 = new Countries(129, "tortor",0);
        list.add(coun128);
        Countries coun129 = new Countries(130, "sodales",0);
        list.add(coun129);
        Countries coun130 = new Countries(131, "habitant curabitur",0);
        list.add(coun130);
        Countries coun131 = new Countries(132, "vitae imperdiet",0);
        list.add(coun131);
        Countries coun132 = new Countries(133, "auctor lacinia",0);
        list.add(coun132);
        Countries coun133 = new Countries(134, "egestas",0);
        list.add(coun133);
        Countries coun134 = new Countries(135, "vivamus",0);
        list.add(coun134);
        Countries coun135 = new Countries(136, "lacinia nulla",0);
        list.add(coun135);
        Countries coun136 = new Countries(137, "quisque",0);
        list.add(coun136);
        Countries coun137 = new Countries(138, "venenatis euismod",0);
        list.add(coun137);
        Countries coun138 = new Countries(139, "volutpat",0);
        list.add(coun138);
        Countries coun139 = new Countries(140, "donec lorem",0);
        list.add(coun139);
        Countries coun140 = new Countries(141, "facilisis",0);
        list.add(coun140);
        Countries coun141 = new Countries(142, "class",0);
        list.add(coun141);
        Countries coun142 = new Countries(143, "taciti porttitor",0);
        list.add(coun142);
        Countries coun143 = new Countries(144, "lectus",0);
        list.add(coun143);
        Countries coun144 = new Countries(145, "velit",0);
        list.add(coun144);
        Countries coun145 = new Countries(146, "libero vehicula",0);
        list.add(coun145);
        Countries coun146 = new Countries(147, "lectus",0);
        list.add(coun146);
        Countries coun147 = new Countries(148, "integer imperdiet",0);
        list.add(coun147);
        Countries coun148 = new Countries(149, "dolor",0);
        list.add(coun148);
        Countries coun149 = new Countries(150, "ultrices pulvinar",0);
        list.add(coun149);

        Connection.getCon().getTransaction().begin();
        list.forEach((iteration) -> {
            countriesDBM.insertCountries(iteration);
        });
        Connection.getCon().getTransaction().commit();

    }
}
